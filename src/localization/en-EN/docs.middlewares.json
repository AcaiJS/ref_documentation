{
	"MIDDLEWARES": "Middlewares",
	"TEXT_01": "Middlewares are a part of the pipeline design pattern that occurs every time you make a request to the server. They are a process of steps that can bail out, preventing from the request from actually arriving at your controller. More than serving as a guard to your information, they can also attach additional data into your request, passing it forward.",
	"TEXT_02": "As you can see from the example above, if the user is not logged and not an admin, the request will bail out before reaching the controller. Serving as a perfect example how you can protect your routes from non-admin users. But you are not limited to return a string or just continue the request, you can also use the response utility from the server to compose better responses. But now that you built it, how are you going to use it? There are two ways, global middlewares or aliased middlewares:",
	"TITLE_01": "Global middlewares",
	"TEXT_03": "Global middlewares are run on every and each request, making it an easy way to sanitize the body fields, parse files, run analytics or anything else, you can register it in the `config/middleware.ts` file",
	"TITLE_02": "Aliased/local middlewares",
	"TEXT_04": "In contrast of the global middlewares, they are aliased into a string key, so when passing an array of strings to the server onRequest (if you use the default router, the route options middleware. It will execute it accordingly, and it works just like the global one.",
	"TITLE_03": "Tips when using them",
	"TEXT_05": "As you can see, you actually have to return the data received from the controller for it to be loaded into the server. That means you can actually run code before and after each request. So you can parse and sanitize data after the request lifecycle. Don't forget to wait the next(request), since it will return a promise.",
	"COMMENT_01": "Before the request reaches the controller",
	"COMMENT_02": "After the request reaches the controller"
}