{
	"TYPES": "Types",
	"TEXT_01": "Dynamic types are the core foundation of our models, they are responsible for sanitizing and telling the auto migrations how the field should be built, and enabling easy customization of anything you wish. To even further customize what you can do, you can also use wildcards when using the dynamic types to allow extra behaviours, you can check out more about that in this page.",
	"TITLE_01": "Available dynamic types",
	"TYPE_01": "Stored in the database as a small integer, it is them converted when working with the view.",
	"TYPE_02": "Equivalent to the date SQL field, it unserializes into a luxon DateTime object for usage. It only stores the current date (not time).",
	"TYPE_03": "Parses into and from float.",
	"TYPE_04": "Parses into and from int.",
	"TYPE_05": "Forces serialization into string.",
	"TYPE_06": "Big integer, bigger version of the common int.",
	"TYPE_07": "Equivalent to the date SQL field, it unserializes into a luxon DateTime object for usage. It stores the current date and time.",
	"TYPE_08": "Equivalent to the date SQL field, it unserializes into a luxon DateTime object for usage. It only stores the current time.",
	"TYPE_09": "It's a luxon DateTime object, but serializes into a timestamp (millis).",
	"TYPE_10": "Acts and saves as a int, but won't force value and will expect it from the database. Has size of 36.",
	"TYPE_11": "A random string unique identifier, this is not an uuid, just a total random string.",
	"TYPE_12": "UUID field that sets during object creation or in database, in case you don't provide any value. It uses version 4.",
	"TYPE_13": "A normal text string field.",
	"TYPE_14": "JSON field, in case your database doesn't support. The query builder will serialize it into a string.",
	"TYPE_15": "A hash field is a field that hashes automatically when passed a string, and it will return it's hashed version. This ensures a certain level of security and centralization of code. But don't confuse those with Regular Expressions, since they are totally different things. They come after the type name, if it's added before, it will be disconsidered.",
	"TITLE_02": "Wildcards",
	"TEXT_02": "As said above, wildcards are a way to easily customize your types without being verbose about it, there are 5 wildcards available to use:",
	"WILDCARD_01": "The nullable wild card, forces the type to be nullable by default",
	"WILDCARD_02": "The unique wild card, forces the type to be unique by default",
	"WILDCARD_03": "Adds a default value to the field, everything after it's value will be considered a literal string, passed directly to the database.",
	"WILDCARD_04": "The primary wild card, forces the type to be primary by default. This is optional, since the primary key can be set through the Table decorator inside the second parameter",
	"TITLE_03": "Add your own dynamic types",
	"TEXT_03": "In cases of more specific needs, you can add your own types, here is an example of how you could do that:",
	"COMMENT_01": "When setting a field value into the model",
	"COMMENT_02": "From model to database (model.save())",
	"COMMENT_03": "From database to model",
	"COMMENT_04": "From model to JS object (model.toObject())"
}